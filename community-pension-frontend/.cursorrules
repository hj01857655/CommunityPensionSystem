# 重要提示
在开始任何开发工作之前，请务必：
1. 阅读项目主文档 `README.md`，了解项目整体架构和功能特性
2. 遵循 `docs/development/README.md` 中的开发规范

# 技术栈参考
请参考 `README.md` 中的技术栈说明。

# 开发规范速查
## 1. 代码提交前检查
- [ ] 代码符合规范要求
- [ ] 所有测试通过
- [ ] 没有编译错误
- [ ] 没有代码冲突

## 2. 分支管理
- 主分支：main
- 开发分支：dev
- 功能分支：feature/功能名称
- 修复分支：hotfix/问题描述

## 3. 提交信息规范
格式：<type>(<scope>): <subject>
type类型：
- feat: 新功能
- fix: 修复
- docs: 文档
- style: 格式
- refactor: 重构
- test: 测试
- chore: 其他

## 4. 接口开发规范
- 后端：必须使用 DTO/VO 对象
- 前端：必须使用封装的 axios 实例
- 安全：必须进行权限验证和参数验证

## 5. 数据库操作规范
- 使用 MyBatisPlus
- 复杂查询：XML配置
- 简单CRUD：注解
- 必须添加合适索引

## 6. 安全规范
- 敏感数据加密
- 密码使用 BCrypt
- 接口权限控制
- 防止 SQL 注入和 XSS

## 7. 性能规范
- 合理使用缓存
- 避免循环调用
- 使用分页查询
- 优化数据库查询

## 8. 文档规范
- 及时更新文档
- 保持注释完整
- 记录重要决策
- 维护 API 文档

# 官方文档快速链接
1. [Vue 3 文档](https://cn.vuejs.org/)
2. [Element Plus 文档](https://element-plus.org/zh-CN/)
3. [MyBatis Plus 文档](https://baomidou.com/)
4. [Stack Overflow](https://stackoverflow.com/)

# 数据库文档
开发前必看：`community-pension-admin/src/main/resources/static/sql/community_pension.sql`

# 前端开发规范
## 1. Vue组件规范
- 使用Composition API
- 组件名称使用PascalCase
- Props必须指定默认值和验证规则
- 事件名称使用kebab-case
- 组件必须包含注释说明
- 使用JSDoc注释规范

## 2. 样式规范
- 使用SCSS预处理器
- 遵循BEM命名规范
- 避免使用!important
- 使用Element Plus变量系统
- 响应式设计必须兼容移动端

## 3. JavaScript规范
- 使用ES6+语法特性
- 使用const和let声明变量，避免var
- 使用解构赋值优化代码
- 使用箭头函数保持this一致性
- 使用Promise处理异步操作
- 使用async/await简化异步代码
- 使用JSDoc添加类型提示注释

## 4. 状态管理
- 使用Pinia进行状态管理
- Store必须使用Composition API方式定义
- 使用defineStore定义store
- 使用setup方式组织store代码
- 遵循以下store结构：
  ```js
  export const useXxxStore = defineStore('xxx', () => {
    // 响应式状态使用ref或reactive
    const state = reactive({})
    // 计算属性使用computed
    const getters = {
      xxx: computed(() => {})
    }
    // 异步操作和复杂逻辑使用普通函数
    function actions() {}
    
    return {
      ...toRefs(state),
      ...getters,
      actions
    }
  })
  ```
- Store按模块划分（前台/后台/系统等）
- 在组件中使用storeToRefs保持响应性
- 异步操作必须处理loading和错误状态
- 复杂状态变更使用action封装
- 派生状态使用computed
- 避免在store中直接修改state，统一通过action修改

## 5. 路由规范
- 路由配置集中管理
- 实现路由权限控制
- 使用路由懒加载
- 规范化路由命名
- 合理使用路由元信息

## 6. 项目结构
src/
├── api/                    # 接口请求
│   ├── back/              # 后台管理接口
│   ├── fore/              # 前台展示接口
│   ├── service/           # 通用服务接口
│   └── system/            # 系统管理接口
├── assets/                # 静态资源
│   ├── icons/            # 图标资源
│   ├── images/           # 图片资源
│   └── styles/           # 样式资源
├── components/            # 公共组件
│   ├── back/             # 后台管理组件
│   ├── common/           # 通用组件
│   ├── CountTo/          # 数字动画组件
│   ├── DictTag/          # 字典标签组件
│   ├── fore/             # 前台展示组件
│   ├── front/            # 前端通用组件
│   └── RightToolbar/     # 右侧工具栏组件
├── directive/             # 自定义指令
├── layout/               # 布局组件
│   ├── back/            # 后台布局
│   └── fore/            # 前台布局
├── mock/                 # 模拟数据
├── router/               # 路由配置
│   ├── back/            # 后台路由
│   └── fore/            # 前台路由
├── stores/               # 状态管理
│   ├── back/            # 后台状态管理
│   ├── fore/            # 前台状态管理
│   └── tagsView.js      # 标签页状态管理
├── utils/                # 工具函数
├── views/                # 页面组件
│   ├── back/            # 后台页面
│   ├── error/           # 错误页面
│   └── fore/            # 前台页面
├── App.vue               # 根组件
└── main.js               # 入口文件

## 7. 代码质量规范
- 使用ESLint进行代码检查
- 使用Prettier进行代码格式化
- 遵循Vue官方风格指南
- 避免过度复杂的组件
- 合理拆分组件和函数
- 保持代码简洁清晰
